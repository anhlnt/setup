# -------------------------------------
# 環境変数
# -------------------------------------

# SSHで接続した先で日本語が使えるようにする
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# エディタ
export EDITOR=/usr/bin/vim

# ページャ
export PAGER=/usr/local/bin/vimpager
export MANPAGER=/usr/local/bin/vimpager


# -------------------------------------
# zshのオプション
# -------------------------------------

## 補完機能の強化
autoload -U compinit
compinit

## 入力しているコマンド名が間違っている場合にもしかして：を出す。
setopt correct

# ビープを鳴らさない
setopt nobeep

## 色を使う
setopt prompt_subst

## ^Dでログアウトしない。
setopt ignoreeof

## バックグラウンドジョブが終了したらすぐに知らせる。
setopt no_tify

## 直前と同じコマンドをヒストリに追加しない
setopt hist_ignore_dups

# 補完
## タブによるファイルの順番切り替えをしない
#unsetopt auto_menu

# cd -[tab]で過去のディレクトリにひとっ飛びできるようにする
setopt auto_pushd

# ディレクトリ名を入力するだけでcdできるようにする
setopt auto_cd

# -------------------------------------
# パス
# -------------------------------------

# 重複する要素を自動的に削除
typeset -U path cdpath fpath manpath

path=(
    $HOME/bin(N-/)
    /usr/local/bin(N-/)
    /usr/local/sbin(N-/)
    $path
)

# -------------------------------------
# プロンプト
# -------------------------------------

autoload -U promptinit; promptinit
autoload -Uz colors; colors
autoload -Uz vcs_info
autoload -Uz is-at-least

# begin VCS
zstyle ":vcs_info:*" enable git svn hg bzr
zstyle ":vcs_info:*" formats "(%s)-[%b]"
zstyle ":vcs_info:*" actionformats "(%s)-[%b|%a]"
zstyle ":vcs_info:(svn|bzr):*" branchformat "%b:r%r"
zstyle ":vcs_info:bzr:*" use-simple true

zstyle ":vcs_info:*" max-exports 6

if is-at-least 4.3.10; then
    zstyle ":vcs_info:git:*" check-for-changes true # commitしていないのをチェック
    zstyle ":vcs_info:git:*" stagedstr "<S>"
    zstyle ":vcs_info:git:*" unstagedstr "<U>"
    zstyle ":vcs_info:git:*" formats "(%b) %c%u"
    zstyle ":vcs_info:git:*" actionformats "(%s)-[%b|%a] %c%u"
fi

function vcs_prompt_info() {
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && echo -n " %{$fg[yellow]%}$vcs_info_msg_0_%f"
}
# end VCS

OK="➜ "
NG="➜ "

PROMPT=""
PROMPT+="%B%F{magenta}%~%f%b"
PROMPT+="\$(vcs_prompt_info)"
PROMPT+="
"
# PROMPT+="%% "
PROMPT+="%(?.%F{green}$OK%f.%F{red}$NG%f) "

RPROMPT="[%n@%m] "
RPROMPT+="[%*]"

# -------------------------------------
# エイリアス
# -------------------------------------

# -n 行数表示, -I バイナリファイル無視, svn関係のファイルを無視
alias grep="grep --color -n -I --exclude='*.svn-*' --exclude='entries' --exclude='*/cache/*'"

# ls
alias ls="ls -G" # color for darwin
export LSCOLORS=gxfxcxdxbxegedabagacad
alias l="ls -la"
alias la="ls -la"
alias l1="ls -1"

# dirs
alias dirs="dirs -v"

# tree
alias tree="tree -NC" # N: 文字化け対策, C:色をつける


# -------------------------------------
# キーバインド
# -------------------------------------

bindkey -e

function cdup() {
   echo
   cd ..
   zle reset-prompt
}
zle -N cdup
bindkey '^K' cdup

bindkey "^R" history-incremental-search-backward

# -------------------------------------
# その他
# -------------------------------------

# cdしたあとで、自動的に ls する
function chpwd() { ls -G }

# iTerm2のタブ名を変更する
function title {
    echo -ne "\033]0;"$*"\007"
}

# 補完候補のメニュー選択で、矢印キーの代わりにhjklで移動出来るようにする。
#zmodload zsh/complist
#bindkey -M menuselect 'h' vi-backward-char
#bindkey -M menuselect 'j' vi-down-line-or-history
#bindkey -M menuselect 'k' vi-up-line-or-history
#bindkey -M menuselect 'l' vi-forward-char

# <Tab>でパス名の補完候補を表示したあと、
# 続けて<Tab>を押すと候補からパス名を選択することができるようになる
zstyle ':completion:*:default' menu select=1

autoload colors
zstyle ':completion:*' list-lolors "${LS_COLORS}"

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# cd したら自動的にpushdする
setopt auto_pushd

# ディレクトリ名だけでcdする
setopt auto_cd

#色の設定
# PROMPT=$'%{\e[30;48;5;082m%}%{\e[38;5;001m%}[%n@%m]%{\e[0m%}'

# プロンプト指定
# PROMPT="
# [%n] %{${fg[yellow]}%}%~%{${reset_color}%}
# %(?.%{$fg[green]%}.%{$fg[blue]%})%(?!(*'-') <!(*;-;%)? <)%{${reset_color}%} "

# もしかして時のプロンプト指定
SPROMPT="%{$fg[red]%}%{$suggest%}(*'~'%)? < もしかして %B%r%b %{$fg[red]%}かな? [そう!(y), 違う!(n),a,e]:${reset_color} "

#補完候補をハイライトする
zstyle ':completion:*:default' menu select=2

# 補完関数の表示を強化する
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT
zstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT
zstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'$DEFAULT
zstyle ':completion:*' list-colors di=36 ln=35 ex=31

# マッチ種別を別々に表示
zstyle ':completion:*' group-name ''

#補完を強化する zsh-completions
if [ -e /usr/local/share/zsh-completions ]; then
    fpath=(/usr/local/share/zsh-completions $fpath)
fi

#GitHubの設定
function git(){hub "$@"}

#brunchの監視ビルド、ポート指定
alias bwsp='brunch watch --server --port'
alias bws='brunch watch --server'

#pyenvの設定
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

#pyenv virtualenvの設定
eval "$(pyenv virtualenv-init -)"

#VS Codeをターミナルで起動する
code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* }

# 履歴ファイルの保存先
export HISTFILE=${HOME}/.zsh_history

# メモリに保存される履歴の件数
export HISTSIZE=1000

# 履歴ファイルに保存される履歴の件数
export SAVEHIST=100000

# 重複を記録しない
setopt hist_ignore_dups

# 開始と終了を記録
setopt EXTENDED_HISTORY
# 全履歴を一覧表示する
function history-all { history -E 1 }

#tex
export PATH="/Library/TeX/texbin:$PATH"

#Typora
alias typora="open -a typora"

# Setting for my python modules
export PYTHONPATH="$HOME/Dropbox/.pymodules:$PYTHONPATH"

export PATH=$PATH:$HOME/pear/bin/

#Setting for Caffe
export PYTHONPATH="$HOME/caffe/python:$PYTHONPATH"

export PATH=/usr/local/var/nodebrew/current/bin:$PATH
export PATH=$HOME/.nodebrew/current/bin:$PATH

#実行時間計算
function preexec() {
    timer=${timer:-$SECONDS}
}

function precmd() {
    if [ $timer ]; then
        timer_show=$(($SECONDS - $timer))
        OK="➜ "
        NG="➜ "

        PROMPT=""
        PROMPT+="%B%F{magenta}%~%f%b" 
        PROMPT+="\$(vcs_prompt_info)"
        if [ $timer_show -ge 3 ]; then
            # timer_show=$(printf '%.*f\n' 3 $timer_show)
            [ $(($timer_show/(3600*24))) -eq 0 ] && days="" || days="$(($timer_show/(3600*24)))d "
            [ $(($timer_show%(3600*24)/3600)) -eq 0 -a "$days" = "" ] && hours="" || hours="$(($timer_show%(3600*24)/3600))h "
            [ $(($timer_show%3600/60)) -eq 0 -a "$hours" = "" ] && mins="" || mins="$(($timer_show%3600/60))m "
            seconds="$(($timer_show%60))s"
            elapsed_time="${days}${hours}${mins}${seconds}"
            
            PROMPT+="   %B%F{yellow}took ${elapsed_time} %{$reset_color%}%b"
        fi
        PROMPT+=$'\n'
        PROMPT+="%(?.%F{green}$OK%f.%F{red}$NG%f) "

        export PROMPT=$PROMPT
        unset timer
    fi
}

export PATH=$PATH:`chromedriver-path`

# eval "$(starship init zsh)"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/tuananhlenang/.pyenv/versions/anaconda3-5.3.1/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/Users/tuananhlenang/.pyenv/versions/anaconda3-5.3.1/etc/profile.d/conda.sh" ]; then
#         . "/Users/tuananhlenang/.pyenv/versions/anaconda3-5.3.1/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/tuananhlenang/.pyenv/versions/anaconda3-5.3.1/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

alias python38='/usr/local/Cellar/python@3.8/3.8.7/bin/python3'

